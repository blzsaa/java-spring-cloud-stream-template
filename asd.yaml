fix: Generate correct fields using both type and format part from data type formats

  **Description**
  * Reads both type and format of data type to generate java field from it,
following the logic below:

  | type    | format    | Java class     | fmt | sample                       |
  |---------|-----------|----------------|-----|------------------------------|
  | string  | date      | LocalDate      | %s  | 2000-12-31                   |
  | string  | date-time | OffsetDateTime | %s  | 2000-12-31T23:59:59+01:00    |
  | string  | byte      | byte[]         | %s  | U3dhZ2dlciByb2Nrcw==         |
  | string  | binary    | byte[]         | %s  | base64-encoded file contents |
  | string  | undefined | String         | %s  | string                       |
  | integer | int32     | Integer        | %d  | 1                            |
  | integer | int64     | Long           | %d  | 1L                           |
  | integer |           | Integer        | %d  | 1                            |
  | number  | float     | Float          | %f  | 1.1F                         |
  | number  | double    | Double         | %f  | 1.1                          |
  | number  |           | BigDecimal     | %s  | 100.1                        |
  | boolean |           | Boolean        | %s  | true                         |
  | null    |           | String         | %s  | "string"                     |
  * In case of unknown format (e.g. type: string, format: email) it will generate
  default java class for given type (String).
  * See: https://github.com/asyncapi/asyncapi/blob/master/versions/2.0.0/asyncapi.md#data-type-formats

  ** Test **

-  create _dataTypes.yaml_ with content:

  ```
asyncapi: '2.0.0'
info:
  title: Streetlights API
  version: '1.0.0'
  description: |
    The Smartylighting Streetlights API allows you
    to remotely manage the city lights.
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

servers:
  production:
    url: kafka.bootstrap:{port}
    protocol: kafka
    variables:
      port:
        default: '9092'
        enum:
          - '9092'
          - '9093'

channels:
  event.lighting.measured:
    publish:
      bindings:
        kafka:
          groupId: my-group
      operationId: readLightMeasurement
      message:
        $ref: '#/components/messages/lightMeasured'
    subscribe:
      operationId: updateLightMeasurement
      message:
        $ref: '#/components/messages/lightMeasured'
components:
  messages:
    lightMeasured:
      summary: Inform about environmental lighting conditions for a particular streetlight.
      payload:
        $ref: "#/components/schemas/lightMeasuredPayload"
  schemas:
    lightMeasuredPayload:
      type: object
      properties:
        lumens:
          type: integer
          minimum: 0
          description: Light intensity measured in lumens.
        sentAt:
          type: string
          format: date-time
          description: Date and time when the message was sent.
        integer:
          type: integer
          format: int32
        long:
          type: integer
          format: int64
        integerDefault:
          type: integer
        #        format: int64
        float:
          type: number
          format: float
        double:
          type: number
          format: double
        number:
          type: number
        stringEnum:
          type: string
          enum: [
              "userPassword"
          ]
        #        format:
        byte:
          type: string
          format: byte
        binary:
          type: string
          format: binary
        boolean:
          type: boolean
        #        format:
        date:
          type: string
          format: date
        dateTime:
          type: string
          format: date-time
        password:
          type: string
          format: password
        email:
          type: string
          format: email
  ```

- run: `ag dataTypes.yaml java-spring-cloud-stream-template`
- assert that generated LightMeasuredPayload contains all generatable java fields, e.g.


  **Related issue(s)**
  Resolves #57
